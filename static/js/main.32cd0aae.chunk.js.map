{"version":3,"sources":["components/Search/Search.js","components/Wrapper/index.js","SearchContainer.js","App.js","serviceWorker.js","index.js"],"names":["Search","props","Container","Row","Col","value","search","onChange","handleInputChange","type","name","placeholder","Wrapper","className","children","SearchContainer","searchEmployees","event","results","target","setState","state","list","Employees","filter","data","toLowerCase","includes","map","alt","src","image","phone","email","DOB","key","this","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"85FAiCeA,EA5BD,SAACC,GAEP,OACI,kBAACC,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,KACI,8BACI,mDAEJ,2BACYC,MAAOJ,EAAMK,OACbC,SAAUN,EAAMO,kBAChBC,KAAK,OACLC,KAAK,OACLC,YAAY,eAK5B,kBAACP,EAAA,EAAD,SClBLQ,MAJf,SAAiBX,GACf,OAAO,yBAAKY,UAAU,WAAWZ,EAAMa,W,QCoE1BC,E,kDAjEX,WAAYd,GAAQ,IAAD,8BACf,cAAMA,IAQVe,gBAAkB,SAACC,GACf,IAAIC,EAAUD,EAAME,OAAOd,MAC3B,EAAKe,SAAS,CAAEd,OAAQY,KARxB,EAAKG,MAAQ,CACTf,OAAQ,MAJG,E,qDAkBT,IAAD,OACCgB,EAAOC,EAAUC,QAAO,SAACC,GAC3B,OAA0B,OAAtB,EAAKJ,MAAMf,QAEJmB,EAAKf,KAAKgB,cAAcC,SAAS,EAAKN,MAAMf,OAAOoB,gBAAkBD,EAAKf,KAAKgB,cAAcC,SAAS,EAAKN,MAAMf,OAAOoB,eADxHD,OACJ,KAGRG,KAAI,SAACH,GACJ,OACI,yBAAKZ,UAAU,QACX,yBAAKA,UAAU,iBACX,yBAAKgB,IAAKJ,EAAKf,KAAMoB,IAAKL,EAAKM,SAEnC,yBAAKlB,UAAU,WACX,4BACI,4BACI,0CADJ,IAC6BY,EAAKM,OAElC,4BACI,yCADJ,IAC4BN,EAAKf,MAEjC,4BACI,0CADJ,IAC6Be,EAAKO,OAElC,4BACI,0CADJ,IAC6BP,EAAKQ,OAElC,4BACI,wCADJ,IAC2BR,EAAKS,WAQpD,OACI,oCACI,kBAAC,EAAD,CAAQC,IAAKC,KAAKf,MAAMf,OAAQD,MAAO+B,KAAKf,MAAMf,OAAQE,kBAAmB4B,KAAKpB,kBAClF,kBAAC,EAAD,KACKM,Q,GA3DSe,aCyCfC,E,uKA1BX,OAgBE,oCACE,kBAAC,EAAD,W,GA9BUD,aCKEE,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCbNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SD0HpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.32cd0aae.chunk.js","sourcesContent":["import React from \"react\";\r\nimport Container from \"react-bootstrap/Container\"\r\nimport Row from \"react-bootstrap/Row\"\r\nimport Col from \"react-bootstrap/Col\"\r\n\r\nconst Search =(props) => {\r\n\r\n        return (\r\n            <Container>\r\n                <Row>\r\n                    <Col>\r\n                        <form>\r\n                            <label>\r\n                                Search Employees:\r\n                        <input\r\n                                    value={props.search}\r\n                                    onChange={props.handleInputChange}\r\n                                    type=\"text\"\r\n                                    name=\"name\"\r\n                                    placeholder=\"Courage\">\r\n                                </input>\r\n                            </label>\r\n                        </form>\r\n                    </Col>\r\n                    <Col>\r\n\r\n                    </Col>\r\n                </Row>\r\n            </Container>\r\n\r\n        );\r\n    }\r\n\r\nexport default Search;\r\n","import React from \"react\";\r\n\r\nfunction Wrapper(props) {\r\n  return <div className=\"wrapper\">{props.children}</div>;\r\n}\r\n\r\nexport default Wrapper;","import React, { Component } from \"react\";\r\nimport Search from \"./components/Search/Search\";\r\nimport Wrapper from \"./components/Wrapper/index\";\r\nimport Employees from \"./employees.json\";\r\n\r\nclass SearchContainer extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            search: null\r\n        };\r\n\r\n    };\r\n\r\n    searchEmployees = (event) => {\r\n        let results = event.target.value;\r\n        this.setState({ search: results })\r\n    };\r\n\r\n    // componentDidMount() {\r\n    //     this.searchEmployees();\r\n    // };\r\n\r\n    render() {\r\n        const list = Employees.filter((data) => {\r\n            if (this.state.search === null) {\r\n                return data\r\n            } else if (data.name.toLowerCase().includes(this.state.search.toLowerCase()) || data.name.toLowerCase().includes(this.state.search.toLowerCase())) {\r\n                return data\r\n            }\r\n        }).map((data) => {\r\n            return (\r\n                <div className=\"card\">\r\n                    <div className=\"img-container\">\r\n                        <img alt={data.name} src={data.image} />\r\n                    </div>\r\n                    <div className=\"content\">\r\n                        <ul>\r\n                            <li>\r\n                                <strong>Image:</strong> {data.image}\r\n                            </li>\r\n                            <li>\r\n                                <strong>Name:</strong> {data.name}\r\n                            </li>\r\n                            <li>\r\n                                <strong>Phone:</strong> {data.phone}\r\n                            </li>\r\n                            <li>\r\n                                <strong>Email:</strong> {data.email}\r\n                            </li>\r\n                            <li>\r\n                                <strong>DOB:</strong> {data.DOB}\r\n                            </li>\r\n                        </ul>\r\n                    </div>\r\n\r\n                </div>\r\n            )\r\n        })\r\n        return (\r\n            <>\r\n                <Search key={this.state.search} value={this.state.search} handleInputChange={this.searchEmployees} />\r\n                <Wrapper>\r\n                    {list}\r\n                </Wrapper>\r\n            </>\r\n        );\r\n    };\r\n};\r\n\r\nexport default SearchContainer;\r\n","import React, { Component } from \"react\";\nimport SearchContainer from \"./SearchContainer\"\n// import EmployeeCard from \"./components/EmployeeCard\";\n// import Wrapper from \"./components/Wrapper\";\n// import Title from \"./components/Title\";\n// import employees from \"./employees.json\";\n\nclass App extends Component {\n  // state = {\n  //     employees\n  //   };\n\n  //   sortEmployeeName = name => {\n\n  //     const employees = this.state.employees.filter(employee => employee.name !== name);\n\n  //     this.setState({ employees });\n  //   };\n\n  render() {\n    return (\n      // <Wrapper>\n      //   <Title>Employee Directory</Title>\n      //   {this.state.employees.map(employee => (\n      //     <EmployeeCard\n      //       sortEmployeeName={this.sortEmployeeName}\n      //       id={employee.id}\n      //       key={employee.id}\n      //       name={employee.name}\n      //       image={employee.image}\n      //       email={employee.email}\n      //       phone={employee.phone}\n      //       DOB={employee.DOB}\n      //       />\n            // <Wrapper />\n\n      <>\n        <SearchContainer />\n      </>\n\n      \n      \n      )\n        \n  };\n}; \nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}